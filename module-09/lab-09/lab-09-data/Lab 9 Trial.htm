<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
.MsoChpDefault
	{font-size:10.0pt;
	font-family:"Calibri","sans-serif";}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=EN-US>

<div class=WordSection1>

<p class=MsoNormal>&lt;!DOCTYPE html&gt;</p>

<p class=MsoNormal>&lt;html&gt;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&lt;head&gt;</p>

<p class=MsoNormal>    &lt;meta charset=utf-8 /&gt;</p>

<p class=MsoNormal>    &lt;title&gt;Lab 09 Template&lt;/title&gt;</p>

<p class=MsoNormal>    &lt;meta name='viewport'
content='initial-scale=1,maximum-scale=1,user-scalable=no' /&gt;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>    &lt;link rel=&quot;stylesheet&quot;
href=&quot;https://unpkg.com/leaflet@1.0.3/dist/leaflet.css&quot; /&gt;</p>

<p class=MsoNormal>    &lt;link
href='http://fonts.googleapis.com/css?family=Lato' rel='stylesheet'
type='text/css'&gt;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>    &lt;style&gt;</p>

<p class=MsoNormal>        body {</p>

<p class=MsoNormal>            margin: 0;</p>

<p class=MsoNormal>            padding: 0;</p>

<p class=MsoNormal>            background: whitesmoke;</p>

<p class=MsoNormal>            font-family: Lato, sans-serif;</p>

<p class=MsoNormal>            color: #0D0000;</p>

<p class=MsoNormal>        }</p>

<p class=MsoNormal>        header {</p>

<p class=MsoNormal>            padding: 6px 10%;</p>

<p class=MsoNormal>        }</p>

<p class=MsoNormal>        h1 {</p>

<p class=MsoNormal>            display: inline-block;</p>

<p class=MsoNormal>            margin-right: 20px;</p>

<p class=MsoNormal>            color: #001323;</p>

<p class=MsoNormal>        }</p>

<p class=MsoNormal>        h2 {</p>

<p class=MsoNormal>            display: inline-block;</p>

<p class=MsoNormal>            color: #001323;</p>

<p class=MsoNormal>        }</p>

<p class=MsoNormal>        #map {</p>

<p class=MsoNormal>            width: 80%;</p>

<p class=MsoNormal>            height: 540px;</p>

<p class=MsoNormal>            margin: 10px auto;</p>

<p class=MsoNormal>        }</p>

<p class=MsoNormal>        footer {</p>

<p class=MsoNormal>            padding: 6px 10%;</p>

<p class=MsoNormal>            width: 80%;</p>

<p class=MsoNormal>        }</p>

<p class=MsoNormal>        p {</p>

<p class=MsoNormal>            font-size: 1em;</p>

<p class=MsoNormal>            color: #001323;</p>

<p class=MsoNormal>        }</p>

<p class=MsoNormal>    &lt;/style&gt;</p>

<p class=MsoNormal>&lt;/head&gt;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&lt;body&gt;</p>

<p class=MsoNormal>    &lt;header&gt;</p>

<p class=MsoNormal>        &lt;h1&gt;U.S. Electric Power Generation&lt;/h1&gt;</p>

<p class=MsoNormal>        &lt;h2&gt;Comparison of Power Generation in the U.S.
by fuel source (coal, solar, nuclear)&lt;/h2&gt;</p>

<p class=MsoNormal>    &lt;/header&gt;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>    &lt;div id='map'&gt;&lt;/div&gt;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>    &lt;footer&gt;</p>

<p class=MsoNormal>        &lt;p&gt;Map authored by Tom Scholten&lt;/p&gt;</p>

<p class=MsoNormal>        &lt;p&gt;MAP 672--Lab 9.&lt;/p&gt;</p>

<p class=MsoNormal>    &lt;/footer&gt;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>    &lt;script
src=&quot;https://unpkg.com/leaflet@1.0.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;</p>

<p class=MsoNormal>    &lt;script src=&quot;power-plants.js&quot;&gt;&lt;/script&gt;</p>

<p class=MsoNormal>    &lt;script&gt;</p>

<p class=MsoNormal>        var map = L.map('map', {</p>

<p class=MsoNormal>            center: [36, -94],</p>

<p class=MsoNormal>            zoom: 4,</p>

<p class=MsoNormal>        });</p>

<p class=MsoNormal>        var tiles =
L.tileLayer('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', {</p>

<p class=MsoNormal>            attribution: '&amp;copy; &lt;a href=&quot;http://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt;
&amp;copy; &lt;a
href=&quot;http://cartodb.com/attributions&quot;&gt;CartoDB&lt;/a&gt;',</p>

<p class=MsoNormal>            subdomains: 'abcd',</p>

<p class=MsoNormal>            maxZoom: 19</p>

<p class=MsoNormal>        });</p>

<p class=MsoNormal>        tiles.addTo(map);</p>

<p class=MsoNormal>        // function takes a value and returns the radius of
a circleMarker</p>

<p class=MsoNormal>        function getRadius(val) {</p>

<p class=MsoNormal>            var radius = Math.sqrt(val / Math.PI);</p>

<p class=MsoNormal>            return radius * .8;</p>

<p class=MsoNormal>        }</p>

<p class=MsoNormal>        // create a L.geoJson layer for COAL</p>

<p class=MsoNormal>        var coalLayer = L.geoJson(plants, {</p>

<p class=MsoNormal>            pointToLayer: function(feature, latlng) {</p>

<p class=MsoNormal>                return L.circleMarker(latlng, {</p>

<p class=MsoNormal>                    // options here</p>

<p class=MsoNormal>                    color: '#775c5c',</p>

<p class=MsoNormal>                    fillColor: '#775c5c',</p>

<p class=MsoNormal>                    weight: 1,</p>

<p class=MsoNormal>                    stroke: 1,</p>

<p class=MsoNormal>                    fillOpacity: .8,</p>

<p class=MsoNormal>                    radius:
getRadius(feature.properties.fuel_source.Coal)</p>

<p class=MsoNormal>                })</p>

<p class=MsoNormal>            },</p>

<p class=MsoNormal>            filter: function(feature) {</p>

<p class=MsoNormal>                if (feature.properties.fuel_source.Coal) {</p>

<p class=MsoNormal>                    return feature;</p>

<p class=MsoNormal>                }</p>

<p class=MsoNormal>            }</p>

<p class=MsoNormal>        }).addTo(map);</p>

<p class=MsoNormal>        // create a L.geoJson layer for SOLAR</p>

<p class=MsoNormal>        var SolarLayer = L.geoJson(plants, {</p>

<p class=MsoNormal>            pointToLayer: function(feature, latlng) {</p>

<p class=MsoNormal>                return L.circleMarker(latlng, {</p>

<p class=MsoNormal>                    // options here</p>

<p class=MsoNormal>                    color: '#F2FA08',</p>

<p class=MsoNormal>                    fillColor: '#F2FA08',</p>

<p class=MsoNormal>                    weight: 1,</p>

<p class=MsoNormal>                    stroke: 1,</p>

<p class=MsoNormal>                    fillOpacity: .8,</p>

<p class=MsoNormal>                    radius:
getRadius(feature.properties.fuel_source.Solar)</p>

<p class=MsoNormal>                })</p>

<p class=MsoNormal>            },</p>

<p class=MsoNormal>            filter: function(feature) {</p>

<p class=MsoNormal>                if (feature.properties.fuel_source.Solar) {</p>

<p class=MsoNormal>                    return feature;</p>

<p class=MsoNormal>                }</p>

<p class=MsoNormal>            }</p>

<p class=MsoNormal>        }).addTo(map);</p>

<p class=MsoNormal>        // create a L.geoJson layer for NUCLEAR</p>

<p class=MsoNormal>        var NuclearLayer = L.geoJson(plants, {</p>

<p class=MsoNormal>            pointToLayer: function(feature, latlng) {</p>

<p class=MsoNormal>                return L.circleMarker(latlng, {</p>

<p class=MsoNormal>                    // options here</p>

<p class=MsoNormal>                    color: '#FA1008',</p>

<p class=MsoNormal>                    fillColor: '#Fa1008',</p>

<p class=MsoNormal>                    weight: 1,</p>

<p class=MsoNormal>                    stroke: 1,</p>

<p class=MsoNormal>                    fillOpacity: .8,</p>

<p class=MsoNormal>                    radius:
getRadius(feature.properties.fuel_source.Nuclear)</p>

<p class=MsoNormal>                })</p>

<p class=MsoNormal>            },</p>

<p class=MsoNormal>            filter: function(feature) {</p>

<p class=MsoNormal>                if (feature.properties.fuel_source.Nuclear)
{</p>

<p class=MsoNormal>                    return feature;</p>

<p class=MsoNormal>                }</p>

<p class=MsoNormal>            }</p>

<p class=MsoNormal>        }).addTo(map);</p>

<p class=MsoNormal>        map.on('click', function(e) {</p>

<p class=MsoNormal>            coalLayer.eachLayer(function(layer) {</p>

<p class=MsoNormal>                var distance =
e.latlng.distanceTo(layer.getLatLng()) / 1000; // distance as km</p>

<p class=MsoNormal>                var popup = &quot;Plant Name: &quot; +
layer.feature.properties.plant_name +</p>

<p class=MsoNormal>                            &quot;&lt;br&gt;Fuel Source:
&quot; + layer.feature.properties.fuel_source +</p>

<p class=MsoNormal>                            &quot;&lt;br&gt; Distance from
click: &quot; + distance.toLocaleString() + &quot; km&quot; +</p>

<p class=MsoNormal>                            &quot;&lt;br&gt;Capacity: &quot;
+ layer.feature.properties.capacity_mw;</p>

<p class=MsoNormal>                layer.bindPopup(popup);</p>

<p class=MsoNormal>                if (distance &gt; 500) {</p>

<p class=MsoNormal>                    layer.setStyle({</p>

<p class=MsoNormal>                        stroke: false,</p>

<p class=MsoNormal>                        fill: false</p>

<p class=MsoNormal>                    });</p>

<p class=MsoNormal>                } else {</p>

<p class=MsoNormal>                    layer.setStyle({</p>

<p class=MsoNormal>                        stroke: true,</p>

<p class=MsoNormal>                        fill: true</p>

<p class=MsoNormal>                    });</p>

<p class=MsoNormal>                }</p>

<p class=MsoNormal>            });</p>

<p class=MsoNormal>            SolarLayer.eachLayer(function(layer) {</p>

<p class=MsoNormal>                var distance =
e.latlng.distanceTo(layer.getLatLng()) / 500; // distance as km</p>

<p class=MsoNormal>                var popup = &quot;Plant Name: &quot; +
layer.feature.properties.plant_name +</p>

<p class=MsoNormal>                            &quot;&lt;br&gt;Fuel Source:
&quot; + layer.feature.properties.fuel_source +</p>

<p class=MsoNormal>                            &quot;&lt;br&gt; Distance from
click: &quot; + distance.toLocaleString() + &quot; km&quot; +</p>

<p class=MsoNormal>                            &quot;&lt;br&gt;Capacity: &quot;
+ layer.feature.properties.capacity_mw;</p>

<p class=MsoNormal>                layer.bindPopup(popup);</p>

<p class=MsoNormal>                if (distance &gt; 500) {</p>

<p class=MsoNormal>                    layer.setStyle({</p>

<p class=MsoNormal>                        stroke: false,</p>

<p class=MsoNormal>                        fill: false</p>

<p class=MsoNormal>                    });</p>

<p class=MsoNormal>                } else {</p>

<p class=MsoNormal>                    layer.setStyle({</p>

<p class=MsoNormal>                        stroke: true,</p>

<p class=MsoNormal>                        fill: true</p>

<p class=MsoNormal>                    });</p>

<p class=MsoNormal>                }</p>

<p class=MsoNormal>            });</p>

<p class=MsoNormal>            NuclearLayer.eachLayer(function(layer) {</p>

<p class=MsoNormal>                var distance =
e.latlng.distanceTo(layer.getLatLng()) / 1000; // distance as km</p>

<p class=MsoNormal>                var popup = &quot;Plant Name: &quot; +
layer.feature.properties.plant_name +</p>

<p class=MsoNormal>                            &quot;&lt;br&gt;Fuel Source:
&quot; + layer.feature.properties.fuel_source +</p>

<p class=MsoNormal>                            &quot;&lt;br&gt; Distance from
click: &quot; + distance.toLocaleString() + &quot; km&quot; +</p>

<p class=MsoNormal>                            &quot;&lt;br&gt;Capacity: &quot;
+ layer.feature.properties.capacity_mw;</p>

<p class=MsoNormal>                layer.bindPopup(popup);</p>

<p class=MsoNormal>                if (distance &gt; 500) {</p>

<p class=MsoNormal>                    layer.setStyle({</p>

<p class=MsoNormal>                        stroke: false,</p>

<p class=MsoNormal>                        fill: false</p>

<p class=MsoNormal>                    });</p>

<p class=MsoNormal>                } else {</p>

<p class=MsoNormal>                    layer.setStyle({</p>

<p class=MsoNormal>                        stroke: true,</p>

<p class=MsoNormal>                        fill: true</p>

<p class=MsoNormal>                    });</p>

<p class=MsoNormal>                }</p>

<p class=MsoNormal>            });</p>

<p class=MsoNormal>        });</p>

<p class=MsoNormal>        var sourceLayers = {</p>

<p class=MsoNormal>            &quot;&lt;b
style='color:#775c5c'&gt;Coal&lt;/b&gt;&quot;: coalLayer,</p>

<p class=MsoNormal>            &quot;&lt;b
style='color:#F2FA08'&gt;Solar&lt;/b&gt;&quot;: SolarLayer,</p>

<p class=MsoNormal>            &quot;&lt;b
style='color:#FA1008'&gt;Nuclear&lt;/b&gt;&quot;: NuclearLayer</p>

<p class=MsoNormal>        }</p>

<p class=MsoNormal>        L.control.layers(null, sourceLayers, {</p>

<p class=MsoNormal>            collapsed: false</p>

<p class=MsoNormal>        }).addTo(map);</p>

<p class=MsoNormal>    &lt;/script&gt;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&lt;/body&gt;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&lt;/html&gt;</p>

</div>

</body>

</html>
